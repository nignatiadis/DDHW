// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Rcpp_classicTautString_TV1
NumericVector Rcpp_classicTautString_TV1(NumericVector input, double lambda);
RcppExport SEXP _IHW_Rcpp_classicTautString_TV1(SEXP inputSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type input(inputSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_classicTautString_TV1(input, lambda));
    return rcpp_result_gen;
END_RCPP
}
// Grenander_cdf_export
double Grenander_cdf_export(List grenander_list, double t);
RcppExport SEXP _IHW_Grenander_cdf_export(SEXP grenander_listSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type grenander_list(grenander_listSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(Grenander_cdf_export(grenander_list, t));
    return rcpp_result_gen;
END_RCPP
}
// Grenander_pdf_export
double Grenander_pdf_export(List grenander_list, double t);
RcppExport SEXP _IHW_Grenander_pdf_export(SEXP grenander_listSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type grenander_list(grenander_listSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(Grenander_pdf_export(grenander_list, t));
    return rcpp_result_gen;
END_RCPP
}
// Grenander_invert_subgradient
NumericVector Grenander_invert_subgradient(List grenander_list, double lambda);
RcppExport SEXP _IHW_Grenander_invert_subgradient(SEXP grenander_listSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type grenander_list(grenander_listSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(Grenander_invert_subgradient(grenander_list, lambda));
    return rcpp_result_gen;
END_RCPP
}
// single_t_FDR
NumericVector single_t_FDR(List train_grenander, NumericVector test_ms, double alpha);
RcppExport SEXP _IHW_single_t_FDR(SEXP train_grenanderSEXP, SEXP test_msSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type train_grenander(train_grenanderSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type test_ms(test_msSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(single_t_FDR(train_grenander, test_ms, alpha));
    return rcpp_result_gen;
END_RCPP
}
// GrenMix_pdf
double GrenMix_pdf(List train_grenander, NumericVector test_ms, double t);
RcppExport SEXP _IHW_GrenMix_pdf(SEXP train_grenanderSEXP, SEXP test_msSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type train_grenander(train_grenanderSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type test_ms(test_msSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(GrenMix_pdf(train_grenander, test_ms, t));
    return rcpp_result_gen;
END_RCPP
}
// GrenMix_cdf
double GrenMix_cdf(List train_grenander, NumericVector test_ms, double t);
RcppExport SEXP _IHW_GrenMix_cdf(SEXP train_grenanderSEXP, SEXP test_msSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type train_grenander(train_grenanderSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type test_ms(test_msSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(GrenMix_cdf(train_grenander, test_ms, t));
    return rcpp_result_gen;
END_RCPP
}
// GrenMix_lagrange_balance
Rcpp::NumericVector GrenMix_lagrange_balance(Rcpp::List train_grenander, Rcpp::NumericVector test_ms, double lambda, double alpha, bool linearized);
RcppExport SEXP _IHW_GrenMix_lagrange_balance(SEXP train_grenanderSEXP, SEXP test_msSEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP linearizedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type train_grenander(train_grenanderSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type test_ms(test_msSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type linearized(linearizedSEXP);
    rcpp_result_gen = Rcpp::wrap(GrenMix_lagrange_balance(train_grenander, test_ms, lambda, alpha, linearized));
    return rcpp_result_gen;
END_RCPP
}
// unregularized_thresholds_bh
NumericVector unregularized_thresholds_bh(List train_grenander, NumericVector test_ms, double alpha);
RcppExport SEXP _IHW_unregularized_thresholds_bh(SEXP train_grenanderSEXP, SEXP test_msSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type train_grenander(train_grenanderSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type test_ms(test_msSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(unregularized_thresholds_bh(train_grenander, test_ms, alpha));
    return rcpp_result_gen;
END_RCPP
}
// InvertSubgradientTilted
double InvertSubgradientTilted(List grenander, double mu, double rho, double b, double alpha);
RcppExport SEXP _IHW_InvertSubgradientTilted(SEXP grenanderSEXP, SEXP muSEXP, SEXP rhoSEXP, SEXP bSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type grenander(grenanderSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(InvertSubgradientTilted(grenander, mu, rho, b, alpha));
    return rcpp_result_gen;
END_RCPP
}
// lambdaMax
double lambdaMax(List train_grenander, NumericVector test_ms, double alpha, double mu_dual, double single_t);
RcppExport SEXP _IHW_lambdaMax(SEXP train_grenanderSEXP, SEXP test_msSEXP, SEXP alphaSEXP, SEXP mu_dualSEXP, SEXP single_tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type train_grenander(train_grenanderSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type test_ms(test_msSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type mu_dual(mu_dualSEXP);
    Rcpp::traits::input_parameter< double >::type single_t(single_tSEXP);
    rcpp_result_gen = Rcpp::wrap(lambdaMax(train_grenander, test_ms, alpha, mu_dual, single_t));
    return rcpp_result_gen;
END_RCPP
}
// optimal_ts
NumericMatrix optimal_ts(List train_grenander, NumericVector test_ms, double alpha, NumericVector lambda_multipliers);
RcppExport SEXP _IHW_optimal_ts(SEXP train_grenanderSEXP, SEXP test_msSEXP, SEXP alphaSEXP, SEXP lambda_multipliersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type train_grenander(train_grenanderSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type test_ms(test_msSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda_multipliers(lambda_multipliersSEXP);
    rcpp_result_gen = Rcpp::wrap(optimal_ts(train_grenander, test_ms, alpha, lambda_multipliers));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_IHW_Rcpp_classicTautString_TV1", (DL_FUNC) &_IHW_Rcpp_classicTautString_TV1, 2},
    {"_IHW_Grenander_cdf_export", (DL_FUNC) &_IHW_Grenander_cdf_export, 2},
    {"_IHW_Grenander_pdf_export", (DL_FUNC) &_IHW_Grenander_pdf_export, 2},
    {"_IHW_Grenander_invert_subgradient", (DL_FUNC) &_IHW_Grenander_invert_subgradient, 2},
    {"_IHW_single_t_FDR", (DL_FUNC) &_IHW_single_t_FDR, 3},
    {"_IHW_GrenMix_pdf", (DL_FUNC) &_IHW_GrenMix_pdf, 3},
    {"_IHW_GrenMix_cdf", (DL_FUNC) &_IHW_GrenMix_cdf, 3},
    {"_IHW_GrenMix_lagrange_balance", (DL_FUNC) &_IHW_GrenMix_lagrange_balance, 5},
    {"_IHW_unregularized_thresholds_bh", (DL_FUNC) &_IHW_unregularized_thresholds_bh, 3},
    {"_IHW_InvertSubgradientTilted", (DL_FUNC) &_IHW_InvertSubgradientTilted, 5},
    {"_IHW_lambdaMax", (DL_FUNC) &_IHW_lambdaMax, 5},
    {"_IHW_optimal_ts", (DL_FUNC) &_IHW_optimal_ts, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_IHW(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
